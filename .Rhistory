git --version
package.skeleton(name ="my_first_package")
package.skeleton(name = "my.first.package")
package.skeleton(name = "my.first.package")
package.skeleton(name = "my.first.package")
package.skeleton(name = "my.first.package")
package.skeleton(name = "my.first.package")
package.skeleton(name = "my.first.package")
package.skeleton(name = "my.first.package")
dijkstra <- function(graph, init_node) {
actual_vertices <- unique(c(graph$v1, graph$v2))
no_vertices <- length(actual_vertices)
short <- rep(Inf, no_vertices)
short[init_node] <- 0
checked_vertices <- rep(FALSE, no_vertices)
for (no in 1:(no_vertices - 1)) {
initial_length <- Inf
start_vertex <- -1
for (i in 1:no_vertices) {
if (!checked_vertices[i] && short[i] < initial_length) {
initial_length <- short[i]
start_vertex <- i
}
}
checked_vertices[start_vertex] <- TRUE
for (element in 1:nrow(graph)) {
if (!checked_vertices[graph$v2[element]] && graph$v1[element] == actual_vertices[start_vertex] &&
(short[start_vertex] + graph$w[element] < short[graph$v2[element]])) {
short[graph$v2[element]] <- short[start_vertex] + graph$w[element]
}
}
}
return(short)
}
package.skeleton(name = "my.first.package")
devtools::load_all("my.first.package")
devtools::load_all("my.first.package")
rm(list = c("dijkstra"))
devtools::load_all("my.first.package")
my_function()
dijkstra()
euclidean(100, 1000)
euclidean <- function(num1, num2) {
stopifnot(is.numeric(num1),is.numeric(num2))
least_num <- min(num1, num2)
output <- 1
for (i in 1:least_num) {
if (num1 %% i == 0 && num2 %% i == 0) {
output <- i
}
}
return(output)
}
dijkstra.R
#' Dijkstra's Algorithm
#'
#' The algorithm takes a graph and an initial node and calculates the shortest path from the
#"initial node to every other node in the graph
#'
#' @param graph A data frame representing the weighted graph with columns:
#'   - `v1`: The starting node of an edge.
#'   - `v2`: The ending node of an edge.
#'   - `w`: The weight of the edge.
#' @param init_node The initial node from which to find the shortest paths.
#'
#' @return A numeric vector of length equal to the number of nodes in the graph.
#'   Each element represents the shortest distance from the initial node to the
#'   corresponding node in the graph.
#'
#' @references
#' Wikipedia: Dijkstra's Algorithm - https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm
#'
#' @export
dijkstra <- function(graph, init_node) {
stopifnot(is.data.frame(graph), all(c("v1", "v2", "w") %in% colnames(graph)))
stopifnot(is.numeric(init_node), length(init_node) == 1)
actual_vertices <- unique(c(graph$v1, graph$v2))
no_vertices <- length(actual_vertices)
short <- rep(Inf, no_vertices)
short[init_node] <- 0
checked_vertices <- rep(FALSE, no_vertices)
for (no in 1:(no_vertices - 1)) {
initial_length <- Inf
start_vertex <- -1
for (i in 1:no_vertices) {
if (!checked_vertices[i] && short[i] < initial_length) {
initial_length <- short[i]
start_vertex <- i
}
}
checked_vertices[start_vertex] <- TRUE
for (element in 1:nrow(graph)) {
if (!checked_vertices[graph$v2[element]] && graph$v1[element] == actual_vertices[start_vertex] &&
(short[start_vertex] + graph$w[element] < short[graph$v2[element]])) {
short[graph$v2[element]] <- short[start_vertex] + graph$w[element]
}
}
}
return(short)
}
wiki_graph <-
data.frame(v1=c(1,1,1,2,2,2,3,3,3,3,4,4,4,5,5,6,6,6),
v2=c(2,3,6,1,3,4,1,2,4,6,2,3,5,4,6,1,3,5),
w=c(7,9,14,7,10,15,9,10,11,2,15,11,6,6,9,14,2,9))
dijkstra(wiki_graph, 1)
dijkstra(wiki_graph, 3)
euclidean <- function(n, m) {
stopifnot(is.numeric(n), is.numeric(m))
while (m != 0) {
output<-n%%m
n<-m
m<-output
return(n)
}
euclidean <- function(n, m) {
stopifnot(is.numeric(n), is.numeric(m))
while (m != 0) {
output<-n%%m
n<-m
m<-output
return(n)
}
}
euclidean(123612, 13892347912)
